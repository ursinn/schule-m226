/* * MIT License * * Copyright (c) 2020-2022 Ursin Filli * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE * SOFTWARE. */package dev.ursinn.schule.m226.zorkgame;import dev.ursinn.schule.m226.zorkgame.commands.*;import dev.ursinn.schule.m226.zorkgame.items.BuildingAKey;import dev.ursinn.schule.m226.zorkgame.items.TestRoomKey;import dev.ursinn.schule.m226.zorkgame.rooms.*;import java.util.ArrayList;import java.util.List;public class Game {    private static Game instance;    public Parser parser;    public Room currentRoom, lastRoom, roof, buildingB, office, buildingC, reception, secretOffice;    public List<Room> rooms;    public Inventory inventory;    public boolean foundSecretRoom;    /**     * Create the game and initialise its internal map.     */    public Game() {        instance = this;        rooms = new ArrayList<>();        inventory = new Inventory(2);        parser = new Parser();        foundSecretRoom = false;        // Create all the rooms and link their exits together.        Room outside = new Outside();        buildingC = new BuildingC();        reception = new Reception();        buildingB = new BuildingB();        Room lab = new Lab();        office = new Office();        Room buildingA = new BuildingA();        Room testRoom = new TestRoom();        roof = new Roof();        secretOffice = new SecretOffice();        // initialise room exits        outside.setExits(buildingA, buildingB, buildingC, null);        buildingC.setExits(outside, null, reception, null);        reception.setExits(buildingC, null, null, null);        buildingB.setExits(null, lab, office, outside);        lab.setExits(null, null, null, buildingB);        office.setExits(buildingB, null, null, null);        buildingA.setExits(null, testRoom, outside, null);        testRoom.setExits(null, null, null, buildingA);        roof.setExits(null, null, null, office);        secretOffice.setExits(null, null, null, reception);        rooms.add(outside);        rooms.add(buildingC);        rooms.add(reception);        rooms.add(buildingB);        rooms.add(lab);        rooms.add(office);        rooms.add(buildingA);        rooms.add(testRoom);        rooms.add(roof);        rooms.add(secretOffice);        currentRoom = outside; // start game outside        lastRoom = outside;    }    public static Game getInstance() {        return instance;    }    /**     * Main play routine.  Loops until end of play.     */    public void play() {        printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.        boolean finished = false;        while (!finished) {            Command command = parser.getCommand();            finished = processCommand(command);        }        System.out.println("Thank you for playing.  Good bye.");    }    /**     * Print out the opening message for the player.     */    private void printWelcome() {        System.out.println();        System.out.println("Welcome to Zork!");        System.out.println("Zork is a simple adventure game.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());    }    /**     * Given a command, process (that is: execute) the command.     * If this command ends the game, true is returned, otherwise false is     * returned.     */    private boolean processCommand(Command command) {        if (command.isUnknown()) {            System.out.println("I don't know what you mean...");            return false;        }        String cmd = command.cmd();        String[] args = command.args();        switch (cmd) {            case "help":                new HelpCommand().command(cmd, args);                break;            case "go":                new GoCommand().command(cmd, args);                break;            case "quit":                return true;            case "back":                new BackCommand().command(cmd, args);                break;            case "pickup":                new PickUpCommand().command(cmd, args);                break;            case "search":                new SearchCommand().command(cmd, args);                break;            case "use":                new UseCommand().command(cmd, args);                break;            case "map":                new MapCommand().command(cmd, args);                break;            case "talk":                new TalkCommand().command(cmd, args);                break;            case "drop":                new DropCommand().command(cmd, args);                break;            case "inv":                new InvCommand().command(cmd, args);                break;            case "dev_cheats":                inventory.setMaxWight(2000);                inventory.addItem(new BuildingAKey());                inventory.addItem(new TestRoomKey());                break;            default:                break;        }        return false;    }}