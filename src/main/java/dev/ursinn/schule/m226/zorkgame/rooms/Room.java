/* * MIT License * * Copyright (c) 2020-2022 Ursin Filli * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE * SOFTWARE. */package dev.ursinn.schule.m226.zorkgame.rooms;import dev.ursinn.schule.m226.zorkgame.Person;import dev.ursinn.schule.m226.zorkgame.items.Item;import java.util.ArrayList;import java.util.HashMap;import java.util.List;public class Room {    private String description;    private HashMap<String, Room> exits;    private List<Item> items;    private List<Person> persons;    private boolean searched;    private boolean locked;    /**     * Create a room described "description". Initially, it has no exits.     * "description" is something like "a kitchen" or "an open court yard".     */    public Room(String description, boolean locked) {        this.description = description;        this.exits = new HashMap<>();        this.items = new ArrayList<>();        this.persons = new ArrayList<>();        this.locked = locked;    }    /**     * Define the exits of this room.  Every direction either leads to     * another room or is null (no exit there).     */    public void setExits(Room north, Room east, Room south, Room west) {        if (north != null) {            exits.put("north", north);        }        if (east != null) {            exits.put("east", east);        }        if (south != null) {            exits.put("south", south);        }        if (west != null) {            exits.put("west", west);        }    }    /**     * Return the description of the room (the one that was defined in the     * constructor).     */    public String shortDescription() {        return description;    }    /**     * Return a long description of this room, on the form:     * You are in the kitchen.     * Exits: north west     */    public String longDescription() {        return "You are in " + description + ".\n" + exitString();    }    /**     * Return a string describing the room's exits, for example     * "Exits: north west ".     */    private String exitString() {        StringBuilder returnString = new StringBuilder("Exits:");        for (String key : exits.keySet()) {            returnString.append(" ").append(key);        }        return returnString.toString();    }    /**     * Return the room that is reached if we go from this room in direction     * "direction". If there is no room in that direction, return null.     */    public Room nextRoom(String direction) {        return exits.get(direction);    }    public boolean hasItems() {        return items.size() != 0;    }    public boolean hasPersons() {        return persons.size() != 0;    }    public boolean isLocked() {        return locked;    }    public void setLocked(boolean locked) {        this.locked = locked;    }    public List<Person> getPersons() {        return persons;    }    public void setPersons(List<Person> persons) {        this.persons = persons;    }    public boolean isSearched() {        return searched;    }    public void setSearched(boolean searched) {        this.searched = searched;    }    public List<Item> getItems() {        return items;    }    public void setItems(List<Item> items) {        this.items = items;    }}